<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SilverStrike</title><link>https://silverstrike.org/</link><description>Recent content on SilverStrike</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 Dec 2017 21:36:36 +0100</lastBuildDate><atom:link href="https://silverstrike.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Logo</title><link>https://silverstrike.org/logo/</link><pubDate>Thu, 03 May 2018 13:37:01 +0200</pubDate><guid>https://silverstrike.org/logo/</guid><description>Logo realinfo was kind enough to desing a logo for Silverstrike.</description></item><item><title>Setup Instructions for Ubuntu</title><link>https://silverstrike.org/ubuntu-setup/</link><pubDate>Mon, 30 Apr 2018 13:27:31 +0100</pubDate><guid>https://silverstrike.org/ubuntu-setup/</guid><description>Note: this is probably outdated, I currently recommend setting it up using docker.
Here is a guide on how to get up and running using Ubuntu.
Install dependencies sudo apt update sudo apt install nginx postgresql uwsgi uwsgi-plugin-python3 python3-venv git Setup the database The recommended database to use is postgres since it comes with sane defaults.
Postgres In this guide we will use the www-data user because that will allow us to proceed without modifications to a standard postgres installation.</description></item><item><title>Current State</title><link>https://silverstrike.org/posts/current-state/</link><pubDate>Fri, 22 Dec 2017 21:36:36 +0100</pubDate><guid>https://silverstrike.org/posts/current-state/</guid><description>&lt;p>There is a first published version of SilverStrike on &lt;a href="https://pypi.org/project/silverstrike/">pypi&lt;/a>.&lt;/p>
&lt;p>I have been using SilverStrike myself for about 6 months now, always adding stuff that I need.&lt;/p>
&lt;p>I&amp;rsquo;m pretty happy with the core models and don&amp;rsquo;t think they will get any big rework soon meaning that I consider the base parts pretty stable. You should consider the &lt;a href="https://silverstrike.org/rest-api/">rest API&lt;/a> and import functionality rather experimental though.&lt;/p></description></item><item><title>How you can help</title><link>https://silverstrike.org/contribute/</link><pubDate>Wed, 20 Dec 2017 00:30:49 +0100</pubDate><guid>https://silverstrike.org/contribute/</guid><description>You can help in many ways:
Report Bugs by creating issues. Translate SilverStrike into your own language. Copy the english translation file and fill it out for your language. Submit feature requests in GitHub. Please check the roadmap first. Submit actual code using pull requests in GitHub. Design stuff for SilverStrike. I&amp;rsquo;m not a designer, if you are please contact me for more information.</description></item><item><title>Roadmap</title><link>https://silverstrike.org/roadmap/</link><pubDate>Wed, 20 Dec 2017 00:22:08 +0100</pubDate><guid>https://silverstrike.org/roadmap/</guid><description>Here you can find features that will be implemented someday in no particular order
Reports Piggy-banks Search support Mobile App Things that will probably not come:
Multi user support. As in different users accessing different data. Currently all users share all data. Since the primary target is self hosting, adding that feature is not a top priority</description></item><item><title>Screenshots</title><link>https://silverstrike.org/screenshots/</link><pubDate>Tue, 19 Dec 2017 23:26:13 +0100</pubDate><guid>https://silverstrike.org/screenshots/</guid><description> Here are a couple of screenshots of SilverStrike Dashboard Transactions Transaction Detail Recurrence Detail Categories Category Detail Budgets Charts Transaction Form</description></item><item><title>Features</title><link>https://silverstrike.org/features/</link><pubDate>Tue, 19 Dec 2017 14:32:12 +0100</pubDate><guid>https://silverstrike.org/features/</guid><description> Transactions are stored using the double entry bookkeeping system You can categorize transactions using categories You can assign budgets to categories You can create recurring transactions You can access all data using a rest API Builtin admin view to get database access Multiple users access same data (currently all users share all data, will be refined in the future)</description></item><item><title>Overview</title><link>https://silverstrike.org/overview/</link><pubDate>Tue, 19 Dec 2017 14:05:02 +0100</pubDate><guid>https://silverstrike.org/overview/</guid><description>History I started managing my finances using a spread sheet, but soon wanted something more. Since I was a student I started using YNAB because they offered a free year. After the year had passed, I wanted to continue using such a service, but didn&amp;rsquo;t see why I should pay so that someone else gets all my financial information.
After some searching I found a great open-source project called Firefly-III which I used for some time.</description></item><item><title>Docker</title><link>https://silverstrike.org/docker/</link><pubDate>Tue, 19 Dec 2017 13:27:31 +0100</pubDate><guid>https://silverstrike.org/docker/</guid><description>Docker images are provided under the name simhnna/silverstrike. There are two tags:
latest will always corrospond to the current release of SilverStrike. dev will match the master branch of SilverStrike. You can find a docker-compose file in the silverstrike repository https://github.com/agstrike/silverstrike/blob/master/docker-compose.yml</description></item><item><title>Setup Instructions</title><link>https://silverstrike.org/setup/</link><pubDate>Tue, 19 Dec 2017 13:27:31 +0100</pubDate><guid>https://silverstrike.org/setup/</guid><description>I currently recommend setting it up using docker. These instructions might not work for you anymore.
You will need a django project in order to run SilverStrike. You can clone a sample application I recommend for production from here. This guide assumes you are cloning the project to /srv/webapps/silverstrike
To actually use it in production I recommend using uwsgi and nginx. If you have can contribute instructions for other servers, please do so!</description></item><item><title>Dev Setup</title><link>https://silverstrike.org/dev-setup/</link><pubDate>Tue, 19 Dec 2017 11:51:19 +0100</pubDate><guid>https://silverstrike.org/dev-setup/</guid><description>If you want to modify SilverStrike to adapt it to your usecase of you want to help in development, this is the right place to look for information.
You should start by cloning the repository. SilverStrike uses Git. You don&amp;rsquo;t need to know very much about it to start. If you don&amp;rsquo;t know about it, I recommend searching the internet, there are numerous tutorials and questions on stack overflow that will help you get started.</description></item><item><title>Rest API</title><link>https://silverstrike.org/rest-api/</link><pubDate>Tue, 19 Dec 2017 11:23:45 +0100</pubDate><guid>https://silverstrike.org/rest-api/</guid><description>There is a rest API that can be used to access and modify the data. Django-rest-framework is used to create it.
Instead of explaining it here, I think you&amp;rsquo;ll have more fun by just exploring it yourself, which you can do here</description></item><item><title>Database Models</title><link>https://silverstrike.org/models/</link><pubDate>Mon, 18 Dec 2017 22:05:52 +0100</pubDate><guid>https://silverstrike.org/models/</guid><description>In this page you can find documentation on how the data is structured and what the convention behind the values are.
It will probably not be up to date all the time, for a bleeding edge documentation refer to the models.py file in the repository.
Foreign keys that link to other database models are stored in the database in a colums called &amp;lt;model_name&amp;gt;_id so for the category of a Split it would be category_id.</description></item></channel></rss>